4.0 服务端的复杂验证. 

①. 通常需要借助于数据表, 和 Service 逻辑来完成
数据的准备：
1.1 在mysql数据库中，选中自己要导出的数据库oa_center右键
            选择备份导出，——> 备份数据库，转存到sql，选中保存地址到桌面上,再把oa_center.sql文件粘贴到
            自己的工程笔记Note里面。
1.2 在mysql数据库中选中oa_center2然后右键，点击导入，选中oa_center的路径，然后点击执行
            当看到导入成功了，完成了数据库的准备工作
1.3 比较悲催，我这里导入的数据怎么没有被导入呢，表里面数据是空的。那还是用以前备份好的数据库吧
              把jdbc.properties中链接的数据库改成oa_center；以后再想办法怎么导入吧，时间紧迫啊


②. 具体步骤:
	> 访问数据库, 利用loginName 查询出对应的 Employee
	> 在 Service 层, 完成登录的逻辑校验:
		> 判断该用户是否被删除. isDeleted 属性值不等于 1 为正常, 即没有被删除
		> 判断该用户是否被禁用. enabled 属性值等于 1 为可用, 否则表示不可用.
		> 判断输入的密码和数据表中的密码是否一致. 
		> 若验证通过, 则登陆次数 + 1, 即 visitedTimes + 1. 返回 Employee 对象. 
操作步骤：		
2.1 建立包  com.atguigu.ems.daos然后在里面建立 EmployeeDao类；代码如下：
@Repository
public class EmployeeDao {

	@Autowired
	private SessionFactory sessionFactory;
	
	public Session getSession(){
		return sessionFactory.getCurrentSession();
	}
	
	public Employee getByLoginName(String loginName){
		String hql = "FROM Employee e WHERE e.loginName = :loginName";
		Query query = getSession().createQuery(hql).setParameter("loginName", loginName);
		return (Employee) query.uniqueResult();
	}
}

2.2 建立 com.atguigu.ems.services包，在包中建立 EmployeeService类
@Service
public class EmployeeService {

	@Autowired
	private EmployeeDao employeeDao;
	
	@Transactional
	public Employee login(String loginName, String password){
		Employee employee = employeeDao.getByLoginName(loginName);
		if(employee == null){
			throw new LoginNameNotFoundException();
		}
		if(employee.getIsDeleted() == 1){
			throw new EmployeeIsDeletedException();
		}
		if(employee.getEnabled() != 1){
			throw new EmployeeDisabledException();
		}
		if(!password.equals(employee.getPassword())){
			throw new PasswordNotMatchException();
		}
		
		//登陆次数 + 1
		employee.setVisitedTimes(employee.getVisitedTimes() + 1);
		return employee;
	}
}


③. 如何在 Service 方法中来表现不同的登陆状态呢 ? 可以通过抛出异常的方式! 不同的情况抛出不同的异常即可

2.3 需要建立装抛出异常的包匹配2.2中抛出的 异常，即com.atguigu.ems.exceptions；分别装着如下几个类，类中没写任何东西
    //登陆名没找到的异常
    public class LoginNameNotFoundException extends RuntimeException {} 
    //密码不匹配的异常
    public class PasswordNotMatchException extends RuntimeException {}
    //Employee被删掉来的异常
    public class EmployeeIsDeletedException extends RuntimeException {}
    //Employee 不可用的异常
    public class EmployeeDisabledException extends RuntimeException {}

2.4 在com.atguigu.ems.test包中的ApplicationContextTest类中进行测试，可以分别测试上面2.3中的四种情况
    
public class ApplicationContextTest {

	private ApplicationContext ctx = null;
	private EmployeeService employeeService = null;
	
	{
		ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		employeeService = ctx.getBean(EmployeeService.class);
	}
	
	@Test
	public void testLogin(){
		Employee employee = employeeService.login("FM12345", "123456");
		System.out.println(employee.getVisitedTimes());;
	}
	
}

2.5 
	> 若没有完成登录操作, 则响应 index.jsp 页面, 并在页面上显示错误消息
	> 若完成登录, 则响应 success.jsp 页面
操作具体步骤：
2.5.1    在com.atguigu.ems.actions	包中的 EmployeeAction类中在 3.0服务端简单验证基础上的⑥步骤中进行修改
      
                    多来如下内容：
增添1：
       	@Autowired
	    private EmployeeService employeeService; 
 增添2：EmployeeAction类实现了SessionAware接口
      public class EmployeeAction extends ActionSupport
             implements ModelDriven<Employee>,Preparable,SessionAware{}
             
网上查阅的资料备注：*****************************************************************
Struts2提供了Aware接口。Aware为"感知"的意思，实现了相关Aware接口的Action能够感知相应的资源。
Struts在实例化一个Action实例时，如果发现它实现了相应的Aware接口，会把相应的资源通过Aware接口方
法注射进去。这种方式也可以叫做注射方式（IoC方式）。
Servlet API中常用对象application、request、response、Session对应的Aware接口分别为
ServletContextAware、ServletRequestAware、ServletResponseAware、SessionAware。

实现了ServletRequestAware接口便会有一个setServletRequest()方法获取request对象。
实现了ServletResponseAware接口便会有一个setServletResponse()方法获取response对象。
不同的是SessionAware接口的setter方法是setSession()方法的参数是Map类型。
该Map代表Session内存储的各种数据。
Aware接口其实是一种拦截器，拦截器代码会在执行Action之前执行，将相关的Servlet对象设置进来。
*******************************************************************************
	    
改变3：
    public String login(){
		System.out.println("employeeaAction login...");
		return "success";
	}	               
修改为:
	public String login(){
		String loginName = model.getLoginName();
		String password = model.getPassword();
		Employee employee = employeeService.login(loginName, password);
		this.session.put("employee", employee);
		return "success";
	}

增添4：
private Map<String, Object> session = null;	

增添5：
	
	@Override
	public void setSession(Map<String, Object> arg0) {
		this.session = arg0;
	}	


*******最终修改结果为：***********
@Scope("prototype")
@Controller
public class EmployeeAction extends ActionSupport
             implements ModelDriven<Employee>,Preparable,SessionAware {
	@Autowired
	private EmployeeService employeeService;
	
	public void prepareLogin(){
		model = new Employee();
	}
	
	public String login(){
		String loginName = model.getLoginName();
		String password = model.getPassword();
		Employee employee = employeeService.login(loginName, password);
		this.session.put("employee", employee);
		return "success";
	}
	
	private Employee model;

	@Override
	public void prepare() throws Exception {}

	@Override
	public Employee getModel() {
		return model;
	}

	private Map<String, Object> session = null;
	
	@Override
	public void setSession(Map<String, Object> arg0) {
        this.session = arg0;		
	}

}	
	
2.5.2  在strutx.xml文件中	添加    return "success" 对应的  result 如下：
     
       <action name="emp-*"
			class="employeeAction"
			method="{1}">
		
		   <result name="success">/WEB-INF/pages/success.jsp</result>
           <result name="input">/index.jsp</result>
       </action>
2.5.3 建立在 /WEB-INF/pages/success.jsp 页面，在success.jsp页面的 body中写如下内容：
      Hello: ${sessionScope.employee.loginName }
	
2.5.4 在服务器中run as 工程  在登陆页面随便输入一个合法的用户名 和密码   
得到如下结果：  com.atguigu.ems.exceptions.LoginNameNotFoundException
输入与数据库匹配的用户名和密码，比如 FM12345 密码 123456
可以在页面中成功输出：     Hello: FM12345


④. 在 Action 层如何来解决 Service 方法可能抛出的各种异常呢 ? 利用 Struts2 的异常映射. 
4.1 在struts.xml 配置文件中 增加如下内容 
 <!-- 使用异常映射来解决 Action 中可能发出的异常 -->
<exception-mapping result="input" 
	exception="com.atguigu.ems.exceptions.EmployeeDisabledException"></exception-mapping>
<exception-mapping result="input" 
    exception="com.atguigu.ems.exceptions.EmployeeIsDeletedException"></exception-mapping>
<exception-mapping result="input" 
	exception="com.atguigu.ems.exceptions.LoginNameNotFoundException"></exception-mapping>
<exception-mapping result="input" 
	exception="com.atguigu.ems.exceptions.PasswordNotMatchException"></exception-mapping>

到   <action name="emp-*"   class="employeeAction"  method="{1}"></action>中；即为：

    <package name="default" namespace="/" extends="struts-default">
		
		<action name="emp-*"
			class="employeeAction"
			method="{1}">
			<!-- 使用异常映射来解决 Action 中可能发出的异常 -->
			<exception-mapping result="input" 
				exception="com.atguigu.ems.exceptions.EmployeeDisabledException"></exception-mapping>
			<exception-mapping result="input" 
				exception="com.atguigu.ems.exceptions.EmployeeIsDeletedException"></exception-mapping>
			<exception-mapping result="input" 
				exception="com.atguigu.ems.exceptions.LoginNameNotFoundException"></exception-mapping>
			<exception-mapping result="input" 
				exception="com.atguigu.ems.exceptions.PasswordNotMatchException"></exception-mapping>
			
			<result name="success">/WEB-INF/pages/success.jsp</result>
			<result name="input">/index.jsp</result>	
		</action>
        
    </package>

测试一下，在登陆页面中随便输入一个用户名和密码；但是页面上没有友好的错误提示消息啊！！！！！

⑤. 如何在页面上根据不同的异常显示不同的错误消息呢 ?
	> 若 Action 中出现异常, 则在异常的响应页面上, 可以访问到异常的信息:
	<s:property value="exception"/> com.atguigu.ems.exceptions.PasswordNotMatchException
	> 进而可以访问到该异常的全类名: <s:property value="exception.class.name"/>
	> 若在资源文件中, 以异常的全类名作为 key, 异常消息作为 value, 在页面上也可以访问: 
		> 在 页面上如何来访问国际化资源文件中的消息呢? 使用 s:text 标签. 
	> 把动态得到异常的全类名和 s:text 标签在一起使用即可得到国际化资源文件中异常所对应的消息。 
	<s:text name="%{exception.class.name}"></s:text>

具体操作步骤
5.1 在 index.jsp 的操作页面上的  用户名模块的上面添加如下模块
    			<font color="red">
					<s:debug></s:debug>
				</font>	
在登陆页面输入一个正确用户名和随意的密码：
可以看到在值栈的栈顶有一个  com.opensymphony.xwork2.interceptor.ExceptionHolder
同时在 下一栏  com.atguigu.ems.entities.Employee 中有一个 
exception 	com.atguigu.ems.exceptions.PasswordNotMatchException
因此可以把 <s:debug></s:debug>改变成 <s:property value="exception"/> 去访问

备注：这里有个小插曲，开始我的entities 中利用的是最终的的 entities中的Employee
而该Employee中有一个工具类，类中有一个方法

	//工具方法: 返回 department.departmentName
	public String getDepartmentName(){
		return department.getDepartmentName();
	}
	
	因为用 <s:debug></s:debug> 会走到这一步，所以总报空空指针异常的错误，最终我把最开始的
	Employee换回来，就ok了，再也不会一点 页面中的Debug就报错了

5.2 在 index.jsp 的操作页面上的  用户名模块的上面添加如下模块
    			<font color="red">
					<s:property value="exception"/>
				</font>	 	
          输入正确longinName,错误密码进行登陆测试，可以得到如下  提示信息：
      com.atguigu.ems.exceptions.PasswordNotMatchException
5.3 在 index.jsp 的操作页面上的  用户名模块的上面添加如下模块
    			<font color="red">
					<s:property value="exception.class.name"/>
				</font>	 
     输入正确longinName,错误密码进行登陆测试，可以得到如下  提示信息：
      com.atguigu.ems.exceptions.PasswordNotMatchException
      和上面感觉没啥区别，但不一样  因为进而可以访问到该异常的全类名。
5.4 在 index.jsp 的操作页面上的  用户名模块的上面添加如下模块，记住要强制进行ognl解析
    			<font color="red">
					<s:text name="%{exception.class.name}"></s:text>
				</font>	
 
 在i18n.poperties中添加如下对应的信息。
com.atguigu.ems.exceptions.PasswordNotMatchException=\u7528\u6237\u540d\u4e0d\u5b58\u5728\u6216\u7528\u6237\u540d\u548c\u5bc6\u7801\u4e0d\u5339\u914d!\u2460
com.atguigu.ems.exceptions.EmployeeDisabledException=\u7528\u6237\u540d\u4e0d\u5b58\u5728\u6216\u7528\u6237\u540d\u548c\u5bc6\u7801\u4e0d\u5339\u914d!\u2461
com.atguigu.ems.exceptions.EmployeeIsDeletedException=\u7528\u6237\u540d\u4e0d\u5b58\u5728\u6216\u7528\u6237\u540d\u548c\u5bc6\u7801\u4e0d\u5339\u914d!\u2462
com.atguigu.ems.exceptions.LoginNameNotFoundException=\u7528\u6237\u540d\u4e0d\u5b58\u5728\u6216\u7528\u6237\u540d\u548c\u5bc6\u7801\u4e0d\u5339\u914d!\u2463

然后在登陆页面中输入用户名但密码不匹配时，就可以显示比较友好的错误提示消息了！！！


验证步骤小总结：
4. 验证:
1). 前端的 JS 验证: 手动的 JS 完成. 
2). 服务端的简单验证: 使用 Struts2 的 validation 验证框架
①. 加入验证的配置文件: 参照 Struts2 例子中的配置文件
②. 加入国际化资源文件. 
③. 页面上使用 s:fielderror 标签来显示错误消息.
④. 定义的 Action 必须继承 ActionSupport 作为父类.
⑤. 为了能使错误消息显示时, 没有 <ul> <li> <span>, 所以需要修改模板文件. 
	> 在 src 下新建 template.simple
	> 在 template.simple 包下新建 fielderror.ftl
	> 把原包下的 fielderror.ftl 的内容复制到 src 下的 fielderror.ftl 中.
	> 修改 src 下 fielderror.ftl 文件
⑥. 需要加入 ModelDriven 和 Preparable, 以确保 Struts2 可以从值栈中读取到对应的属性值
⑦. 其他验证规则参看 Struts2 文档. 	  

3). 服务端的复杂验证. 
①. 通常需要借助于数据表, 和 Service 逻辑来完成
②. 具体步骤:
	> 访问数据库, 利用loginName 查询出对应的 Employee
	> 在 Service 层, 完成登录的逻辑校验:
		> 判断该用户是否被删除. isDeleted 属性值不等于 1 为正常, 即没有被删除
		> 判断该用户是否被禁用. enabled 属性值等于 1 为可用, 否则表示不可用.
		> 判断输入的密码和数据表中的密码是否一致. 
		> 若验证通过, 则登陆次数 + 1, 即 visitedTimes + 1. 返回 Employee 对象. 
	> 若没有完成登录操作, 则响应 index.jsp 页面, 并在页面上显示错误消息
	> 若完成登录, 则响应 success.jsp 页面
③. 如何在 Service 方法中来表现不同的登陆状态呢 ? 可以通过抛出异常的方式! 不同的情况抛出不同的异常即可
④. 在 Action 层如何来解决 Service 方法可能抛出的各种异常呢 ? 利用 Struts2 的异常映射. 
⑤. 如何在页面上根据不同的异常显示不同的错误消息呢 ?
	> 若 Action 中出现异常, 则在异常的响应页面上, 可以访问到异常的信息:
	<s:property value="exception"/> com.atguigu.ems.exceptions.PasswordNotMatchException
	> 进而可以访问到该异常的全类名: <s:property value="exception.class.name"/>
	> 若在资源文件中, 以异常的全类名作为 key, 异常消息作为 value, 在页面上也可以访问: 
		> 在 页面上如何来访问国际化资源文件中的消息呢? 使用 s:text 标签. 
	> 把动态得到异常的全类名和 s:text 标签在一起使用即可得到国际化资源文件中异常所对应的消息。 
	<s:text name="%{exception.class.name}"></s:text>




      
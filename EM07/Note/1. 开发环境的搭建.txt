1. 搭建 SSH 的开发环境:
1). 加入 Spring
①. 加入 jar 包
②. 配置 web.xml 文件: 配置启动 IOC 容器的 Listener
2.1按键 alt+/
   <!-- needed for ContextLoaderListener -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext*.xml</param-value>
	</context-param>

	<!-- Bootstraps the root web application context before servlet initialization -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
③. 加入 Spring 的配置文件
在java Resource下面建立 source folder文件夹，然后建立 applicationContext.xml配置文件


2). 加入 Struts2
①. 加入 jar 包
②. 配置 web.xml 文件: 配置 Struts2 的 Filter
在  D:\MYNOTE\BIGDATA\OpenSource\OpenSource\struts-2.3.15.3-all\struts-2.3.15.3\required\resources里面找
到 web.xml 把  

    <filter>
        <filter-name>struts2</filter-name>
        <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>struts2</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
复制到 所建立的工程web.xml中

③. 加入 Struts2 的配置文件
然后把 D:\MYNOTE\BIGDATA\OpenSource\OpenSource\struts-2.3.15.3-all\struts-2.3.15.3\required\resources
中的 struts.xml复制到conf文件夹里面，然后进行清理成如下的样子

    <constant name="struts.enable.DynamicMethodInvocation" value="false" />
    <constant name="struts.devMode" value="true" />

    <package name="default" namespace="/" extends="struts-default">


    </package>
    
3). 加入 Hibernate
①. 加入 jar 包. 需要把重复的版本较低的包删除! 需要到最原始的文件夹中可以用360强力删除
②. conf 中 加入 hibernate 的配置文件  hibernate.cfg.xml可得到
<hibernate-configuration>
    <session-factory>
    
    
    </session-factory>
</hibernate-configuration>


4). Spring 整合 Struts2:
①. 加入 struts2-spring-plugin-2.3.15.3.jar

5). Spring 整合 Hibernate:
①. 加入数据库驱动和数据库连接池的 jar 包
c3p0-0.9.2.1.jar
hibernate-c3p0-4.2.4.Final.jar
mchange-commons-java-0.2.3.4.jar
以及
mysql-connector-java-5.1.7-bin.jar
②. 在 Spring 的配置文件中配置如下:
	> 配置数据源
	在conf中建立文件  jdbc.properties
	
jdbc.user=root
jdbc.password=orcl
jdbc.jdbcUrl=jdbc:mysql://127.0.0.1:3306/oa_center
jdbc.driverClass=com.mysql.jdbc.Driver
	然后
	
	applicationContext.xml中Namespace中勾选beans，context，tx 然后
	在applicationContext.xml中
	配置：
	
	<!-- 导入资源文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>

	<!-- 配置数据库连接池 -->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>	
	</bean>
	
	然后 新建一个 source folder 文件夹 test
	在其中建立一个测试类
	com.atguigu.ems.test.ApplicationContextTest
	
	其中的代码如下
	
	private ApplicationContext ctx = null;
	
	{
		ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
	}

	@Test
	public void testDataSource() throws SQLException {

		DataSource dataSource = (DataSource)ctx.getBean("dataSource");
		System.out.println(dataSource.getConnection());
	}
	
	运行测试结果： com.mchange.v2.c3p0.impl.NewProxyConnection@b488e5f 则连接数据库成功
	
	>配置hibernate的基本属性
	
	    <!-- 配置 hibernate 的基本属性 -->
    	<property name="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</property>
    	<property name="hibernate.show_sql">false</property>
    	<property name="hibernate.format_sql">true</property>
    	<property name="hibernate.hbm2ddl.auto">update</property>
	
	>applicationContext.xml中 配置 SessionFactory
	 
	  在applicationContex.xml中配置	
	 
	<!-- 配置 SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
		<property name="mappingLocations" value="classpath:com/atguigu/ems/entities/*.hbm.xml"></property>
	</bean>
	
           注意classpath:com/atguigu/ems/entities/将与 src文件下的  com.atguigu.ems.entities相对应
         
	>applicationContext.xml中 配置事务管理器
	
	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>	
	</bean>
	
	>applicationContext.xml中 开启基于注解的事务管理. 
	
	<!-- 开启基于注解的事务管理 -->
	<tx:annotation-driven />
	
	然后把 实体类 entities拷贝（或建立）到com.atguigu.ems.entities中

Address.java
Authority.java
City.java
Department.java
Employee.java
Province.java
Resource.java
Resume.java
Role.java
School.java
然后在相同的包下建立类对应的
Address.hbm.xml
Authority.hbm.xml
City.hbm.xml
Department.hbm.xml
Employee.hbm.xml
Province.hbm.xml
Resource.hbm.xml
Resume.hbm.xml
Role.hbm.xml
School.hbm.xml



然后在  mysql数据库中建立与jdbc.properties中jdbc.jdbcUrl=jdbc:mysql://127.0.0.1:3306/oa_center2
对应名字为oa_center2的数据库

初步运行测试发现一个错误  NoCacheRegionFactoryAvailableException

			
6). 加入 hibernate 二级缓存的相关配置和 jar 包. 
     jar包在 D:\MYNOTE\BIGDATA\OpenSource\OpenSource\hibernate-release-4.2.4.Final\lib\optional\ehcache
              中可以找到：
ehcache-core-2.4.3.jar
hibernate-ehcache-4.2.4.Final.jar
slf4j-api-1.6.1.jar
    然后 在conf文件夹中加入配置文件，在D:\MYNOTE\BIGDATA\OpenSource\OpenSource\hibernate-release-4.2.4.Final\project\etc
    可以找到ehcache.xml

                         然后  在hibernate.cfg.xml中配置
        <!-- 二级缓存相关 -->
    	<property name="hibernate.cache.use_second_level_cache">true</property>
    	<property name="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</property>
    	<property name="hibernate.cache.use_query_cache">true</property>	

然后运行可以看到 mysql中数据库oa_center2中 表已经建立好了
---------------------------------------------------------------------------------

1. JavaSE
2. Oracle SQL
3-. JDBC
4. Javascript & jQuery
5-. XML

6. JavaWEB: JSP、request、session、application
7. Struts2: 还有使用的, 但用的比以前少了, 更多的项目使用 SpringMVC
8. Hibernate
9. Spring: 用起来最容易.

---------------------------------------------------------------------------------

10. 项目: SSH、jQuery、Ajax、SpringSecurity...
11. SpringMVC
12. JPA
13. SpringData
14. myBatis
15. Linux
17. 项目: SpringMVC、Spring、SpringData & JPA、myBatis、Shiro....
16. GIT & GIT HUB
17. Redis
18. MySQL 增强
19. Hadoop
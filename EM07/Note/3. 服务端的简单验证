3.0 服务端的简单验证

验证:
1). 前端的 JS 验证: 手动的 JS 完成. 
2). 服务端的简单验证: 
    2).1
    01. 新建一个 包 com.atguigu.ems.actions，新建一个类  EmployeeAction.java
                       在该类的头部加 @Controller纳入到IOC容器里面
                       再在该 @Controller注解的上面加上一个 @Scope("prototype")
                       备注：IOC容器创建对象，
            1.1 IOC容器本身对象创建时，会将配置文件中配置好的bean创建出来
            1.2 默认是单实例的，只创建bean的一个对象
            1.3 如果设置bean的scope属性为prototype，那么创建bean的对象就是多
                                      实例的，在获取的时候创建，每次获取对象都会创建新的。
        
    02. 在    applicationContext.xml 中配置  自动扫描包
    	<!-- 自动扫描的包 -->
	<context:component-scan base-package="com.atguigu.ems"></context:component-scan>
          
    03. 我们看到在index的页面请求中
        <s:form action="/emp-login" method="POST">
        </s:form>
        
              在 struts.xml中配置 
              (注意这里class用EmployeeAction默认的第一个字母小写employeeAction;
                                            这里的{1}表示接收前面action里通过通配符传来的值;)
    
              
    <package name="default" namespace="/" extends="struts-default">
            
       <action name="emp-*"
			class="employeeAction"
			method="{1}">
		
           <result name="input">/index.jsp</result>
       </action>
       
    </package>
    
    
    04. 在EmployeeAction中输入内容：
                       注意，return "success"即为返回  <result name="success">/xxx.jsp</result>   页面
    
@Scope("prototype")
@Controller
public class EmployeeAction {
	
	public String login(){
		System.out.println("employeeaAction login...");
		return "success";
	}

}

    05  测试运行run as 一下： 数据库里面虽然还没有任何东西呢，我们先不关心这个事情
                        在登录页面随便输入内容，然后点击登录
                       控制台可以打印出 ：  employeeaAction login...
                      浏览器中输出 ： Messages:	
                No result defined for action com.atguigu.ems.actions.EmployeeAction and result success
                     说明跑通了              


2).2
使用 Struts2 的 validation 验证框架
①. 加入验证的配置文件: 参照 Struts2 例子中的配置文件
   1.1 在 OpenSource\OpenSource\struts-2.3.15.3-all\struts-2.3.15.3\required\resources中可以找到 (实际中可能具体路径不同)
 Login-validation.xml复制到com.atguigu.ems.actions包中，然后改名字为 EmployeeAction-validation.xml；改名字的时候可以选中要改的文件按F2键可以
 快速改名字
   1.2  点开 EmployeeAction-validation.xml，对 http://struts.apache.org/dtds/xwork-validator-1.0.2.dtd进行关联
        路径在 struts-2.3.15.3-all\struts-2.3.15.3\apps\src\xwork-core\src\main\resources\xwork-validator-1.0.3.dtd
   1.3 在 EmployeeAction-validation.xml中设置 要验证的 loginName
    
    <field name="loginName">
        <field-validator type="requiredstring">
            <message key="requiredstring"/>
        </field-validator>
    </field>
    
    
 ========备注：另外可以仿照这个例子进行设置，在网上找的=====================
<validators>   
<field name="user.userName">   
   <!-- 验证字符串不能为空 -->   
   <field-validator type="requiredstring">   
    <!-- 去空格 -->   
    <param name="trim">true</param>   
    <!-- 错误提示信息 -->   
    <message>用户名不能为空</message>   
   </field-validator>   
     
   <!-- 验证字符串长度 -->   
   <field-validator type="stringlength">   
    <param name="minLength">2</param>   
    <param name="maxLength">20</param>   
    <message>用户名长度应在2到18个字符间</message>   
   </field-validator>   
</field>   
  
<field name="user.password">   
   <field-validator type="requiredstring">   
    <param name="trim">true</param>   
    <message>密码不能为空</message>   
   </field-validator>   
     
   <field-validator type="stringlength">   
    <param name="minLength">6</param>   
    <param name="maxLength">18</param>   
    <message>密码长度应在6到18个字符之间</message>   
   </field-validator>   
</field>   
  
<field name="user.age">   
   <field-validator type="int">   
    <param name="min">1</param>   
    <param name="max">150</param>   
    <message>年龄应在1到150之间</message>   
   </field-validator>   
</field>   
<!-- 验证字符串为日期类型 -->   
<field name="user.birthday">   
   <field-validator type="date">   
    <param name="min">1900-01-01</param>   
    <param name="max">2008-10-16</param>   
    <message>出生日期应在1900-01-01到2008-10-16</message>   
   </field-validator>   
</field>   
</validators>   
    
=========================================================== 
 因为  <message key="requiredstring"/>  是这个， 和上面这个例子中不一样，是吧，
 所以得加入国际化资源文件：
②. 加入国际化资源文件. 
2.1在conf配置文件夹中建立 i18n.properties 文件
在其中输入：
requiredstring.loginName=\u7528\u6237\u540d\u4e0d\u80fd\u4e3a\u7a7a!
requiredstring.password=\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a!
即 用户名不能为空，以及密码不能为空

注意上述  requiredstring.loginName应该与  EmployeeAction-validation.xml中的 

    <field name="loginName">
        <field-validator type="requiredstring">
            <message key="requiredstring.loginName"/>
        </field-validator>
    </field>
    
          以及 password一栏也应该如此 ，例如： <message key="requiredstring.password"/>
          开始写成这样<message key="requiredstring"/>
         如果没有保持一致 ，页面中将显示一个  requiredstring 即自己的对应的文字显示不出来。
         所以关键是EmployeeAction-validation.xml与i18n.properties要保持一致性
        
2.2 在struts.xml 中 设置国际化资源文件。
	
	<!-- 设置国际化资源文件 -->	
	<constant name="struts.custom.i18n.resources" value="i18n"></constant>
2.3 struts.custom.i18n.resources 这个可以在 default.properties 中用 ctrl+f 输入 i18n找到


       
③. 页面上使用 s:fielderror 标签来显示错误消息.如下：
  3.1  index.jsp 页面上可以用 如下显示错误消息，对于password一栏也是用如下一样的方法
    
    <b>用户名</b>
	<s:textfield name="loginName"></s:textfield>
	<font color="red">
		<s:fielderror fieldName="loginName"></s:fielderror>
	</font>
  
  3.2 index.jsp登录名和密码一栏啥都不输入，因为 有
      <script type="text/javascript">
		/*
		* 前端基于 JS 的验证.
	  </script>
	  
	  因此我们把  里面的核心函数  $(function(){})注销掉
	  
   3.3 登录名和密码啥都不输入，我们点击登录
          仍然可见 
                       控制台可以打印出 ：  employeeaAction login...
                      浏览器中输出 ： Messages:	
                No result defined for action com.atguigu.ems.actions.EmployeeAction and result success
                       说明仍然可以跑通了         

④. 定义的 Action 必须继承 ActionSupport 作为父类.

@Scope("prototype")
@Controller
public class EmployeeAction extends ActionSupport{
	
	public String login(){
		System.out.println("employeeaAction login...");
		return "success";
	}

}

如此，就可以验证了。

⑤. 
5.1 
显示时候我们遇到了新的问题，即页面中用户名和密码一栏以及错误信息显示一栏
不整齐，非常丑。在页面上右击可以看到   <ul class="errorMessage"                            >
                        <li><span>用户名不能为空!</span></li>
        </ul>
它 是祸害来源

5.2 为了能使错误消息显示时, 没有 <ul> <li> <span>, 所以需要修改模板文件. 
	> 在 src 下新建 template.simple
	> 在 template.simple 包下新建 fielderror.ftl
	> 把原包下的 fielderror.ftl 的内容复制到 src 下的 fielderror.ftl 中.
	  路径出处 D:\DevWorkSpace\javaEE0917SVN\EM\WebContent\WEB-INF\lib\struts2-core-2.3.15.3.jar
	  ------->template.simple----->fielderror.ftl
	> 修改 src 下 fielderror.ftl 文件
	
	删掉
	<ul<#rt/>
                        <#if parameters.id?if_exists != "">
                                id="${parameters.id?html}"<#rt/>
                        </#if>
                        <#if parameters.cssClass??>
                                class="${parameters.cssClass?html}"<#rt/>
                            <#else>
                                class="errorMessage"<#rt/>
                        </#if>
                        <#if parameters.cssStyle??>
                                style="${parameters.cssStyle?html}"<#rt/>
                        </#if>
                            >
                            
     </ul>
     
           删掉<li><span>    </span></li>  
	
5.3  不要输入用户名和密码，再登录测试就显示得很整齐了


⑦. 其他验证规则参看 Struts2 文档.
 7.1 浏览器打开差看OpenSource/struts-2.3.15.3-all/struts-2.3.15.3/docs/WW/docs/home.html
         点击  Guides     ；再ctrl+f 搜索 validation  
        在里面可以找到一个叫   stringlength validator  的东东  点开可以看里面的例子进行仿照：
        
      我们在
  <field name="loginName">
     
  </field>
    的里面进行添加stringlength验证
    
    
7.2 添加内容如下   
        <field-validator type="stringlength" short-circuit="true">
        	<param name="minLength">6</param>
        	<message key="minLength.loginName"></message>
        </field-validator>

7.3  <field name="password"></field>里面也添加
       
        <field-validator type="stringlength" short-circuit="true">
        	<param name="minLength">6</param>
        	<message key="minLength.password"></message>
        </field-validator> 

7.4 在i18n.properties中进行对应设置用户名明码不能少于%{minLength}个字符       
minLength.loginName=\u7528\u6237\u540d\u4e0d\u80fd\u5c11\u4e8e%{minLength}\u4e2a\u5b57\u7b26
minLength.password=\u5bc6\u7801\u4e0d\u80fd\u5c11\u4e8e%{minLength}\u4e2a\u5b57\u7b26

7.5 这时候我在登陆页面的中用户名和密码栏无论输入什么，错误提示都是  用户名和密码不能为空，该怎么解决呢？？？
            因为值栈里面根本没有那个属性；因此我们有了下面所述 ⑥ 中的 步骤
	
	
⑥. 需要加入 ModelDriven 和 Preparable, 以确保 Struts2 可以从值栈中读取到对应的属性值
       把EmployeeAction extends ActionSupport改成如下：

@Scope("prototype")
@Controller
public class EmployeeAction extends ActionSupport
             implements ModelDriven<Employee>,Preparable {
	
	public void prepareLogin(){
		model = new Employee();
	}
	
	public String login(){
		System.out.println("employeeaAction login...");
		return "success";
	}
	
	private Employee model;

	@Override
	public void prepare() throws Exception {}

	@Override
	public Employee getModel() {
		return model;
	}

}

然后在登陆页面中输入用户名和密码都少于6个字符，再也不会出现错误提示都是  用户名和密码不能为空
而是错误提示是：
用户名/密码不能少于6个字符   的正确提示信息	

⑧ 正则验证
8.1 OpenSource/struts-2.3.15.3-all/struts-2.3.15.3/docs/WW/docs/validation.html中点开regex validator

例子中有：
    <field name="myStrangePostcode">
        <field-validator type="regex">
            <param name="regex"><![CDATA[([aAbBcCdD][123][eEfFgG][456])]]></param>
        </field-validator>
    </field>
    

8.2 我们前面做了：
  <field name="loginName">
        <field-validator type="stringlength" short-circuit="true">
        	<param name="minLength">6</param>
        	<message key="minLength.loginName"></message>
        </field-validator>
  </field>
  
8.3 于是我们改下如下：<param name="regex"><![CDATA[文本内容]]></param>里面加入我们的正则表达式
备注：在标记CDATA下，所有的标记、实体引用都被忽略，而被XML处理程序一视同仁地当做字符数据看待。
    XML 实例: 在CDATA标记中的信息被解析器原封不动地传给应用程序，并且不解析该段信息中的任何控制标记。

我们再加入一项  <message key="regex.loginName"></message>，用于显示错误提示信息

  <field name="loginName">
        <field-validator type="stringlength" short-circuit="true">
        	<param name="minLength">6</param>
        	<message key="minLength.loginName"></message>
        </field-validator>
        <field-validator type="regex" short-circuit="true">
        	<param name="regex"><![CDATA[^[a-zA-Z]\w*\w$]]></param>
        	<message key="regex.loginName"></message>
        </field-v alidator>
  </field>

8.4 在i18n.properties中添加regex.loginName提示信息
regex.loginName=\u7528\u6237\u540D\u4E0D\u5408\u6CD5\uFF01

8.5 在登陆页面随便乱输入一个怪怪的用户名，然后输入密码进行验证
可以得到提示信息：用户名不合法！


